<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.iceberg.dt.unit.storyboardApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Definitions</key>
	<dict>
		<key>Resources/assets/images/.image.png</key>
		<dict>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>assets</string>
				<string>image</string>
			</array>
			<key>TargetIndices</key>
			<array/>
			<key>Beginning</key>
			<string>This file including it&apos;s parent directory called &quot;_unused&quot; should be removed from your project</string>
		</dict>
		<key>Resources/assets/sounds/.sound.mp3</key>
		<dict>
			<key>TargetIndices</key>
			<array/>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>assets</string>
				<string>sounds</string>
			</array>
			<key>Beginning</key>
			<string>This file should be removed from your xcode project tree</string>
		</dict>
		<key>Resources/assets/icons/.icon.png</key>
		<dict>
			<key>Beginning</key>
			<string>This file should be removed from your xcode project tree</string>
			<key>TargetIndices</key>
			<array/>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>assets</string>
				<string>icons</string>
			</array>
		</dict>
		<key>Resources/databases/.empty.sqlite</key>
		<dict>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>databases</string>
			</array>
			<key>TargetIndices</key>
			<array/>
			<key>Beginning</key>
			<string>This file should be removed from your xcode project tree</string>
		</dict>
		<key>../Coding_Guidelines/dependencies.md</key>
		<dict>
			<key>Beginning</key>
			<string>Installing Dependency Manager

This document will guide you to install dependency manager on your Xcode 4.
Make sure you have latest ruby gem installed.

Run this command first to update Ruby gem:

gem update --system

A. Installing Cocoapods Dependency Manager and Installing Project Dependencies

If you use VendorKit skip to B.	
Before using CocoaPods in your project, make sure you have installed CocoaPods before or update your current installation to the latest by running :

[sudo] gem install cocoapods

pods setup

Then do this steps:

1. Create a project using Iceberg template, use CocoaPods in the Dependency Manager.
2. Close your newly created project.
3. Go to your root directory of your project containing yourproject folder and yourproject.xcodeproj. Make sure you find Podfile file there. If you don&apos;t you should recreate the project using Dependency Manager listed.
4. Go to your terminal (iTerm, zsh, etc) Run pod install on that directory.
5. Open your project with yourproject.xcworkspace don&apos;t use yourproject.xcodeproj

B. Installing VendorKit Dependency Manager and Installing Project Dependencies

Install VendorKit by running this command on terminal :

sudo gem install vendor
Then do this steps:

1. Create a project using Iceberg template, use VendorKit in the Dependency Manager.
2. Go to your root directory of your project containing yourproject folder and yourproject.xcodeproj. Make sure you find Vendorfile file there. If you don&apos;t you should recreate the project using Dependency Manager listed.
3. Open terminal and run:
vendor install</string>
			<key>Group</key>
			<string>Dependencies</string>
			<key>TargetIndices</key>
			<array/>
		</dict>
		<key>../Coding_Guidelines/assets.md</key>
		<dict>
			<key>Beginning</key>
			<string>This group is for storing image assets, such as icons and images</string>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>assets</string>
			</array>
			<key>TargetIndices</key>
			<array/>
		</dict>
		<key>../Coding_Guidelines/databases.md</key>
		<dict>
			<key>Beginning</key>
			<string>This group is for placing database files such as SQLite, JSON, or XML</string>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>databases</string>
			</array>
			<key>TargetIndices</key>
			<array/>
		</dict>
		<key>../Coding_Guidelines/localizations.md</key>
		<dict>
			<key>Beginning</key>
			<string>This group is for placing localizations files</string>
			<key>Group</key>
			<array>
				<string>Resources</string>
				<string>localizations</string>
			</array>
			<key>TargetIndices</key>
			<array/>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___ViewController.h</key>
		<dict>
			<key>Group</key>
			<string>Controllers</string>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___ViewController.m</key>
		<dict>
			<key>Group</key>
			<string>Controllers</string>
		</dict>
		<key>___VARIABLE_classPrefix:identifier___ViewController.m:private</key>
		<string>@interface ___VARIABLE_classPrefix:identifier___ViewController ()

@end
</string>
	</dict>
	<key>Description</key>
	<string>This template provides a starting point for an application that uses a single view. It provides a view controller to manage the view, and a storyboard or nib file that contains the view.</string>
	<key>Identifier</key>
	<string>com.iceberg.dt.unit.singleViewApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Nodes</key>
	<array>
		<string>Resources/assets/images/.image.png</string>
		<string>Resources/assets/sounds/.sound.mp3</string>
		<string>Resources/assets/icons/.icon.png</string>
		<string>Resources/databases/.empty.sqlite</string>
		<string>../Coding_Guidelines/assets.md</string>
		<string>../Coding_Guidelines/databases.md</string>
		<string>../Coding_Guidelines/dependencies.md</string>
		<string>../Coding_Guidelines/localizations.md</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.h:viewControllerInterface</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:comments</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:import:___VARIABLE_classPrefix:identifier___ViewController.h</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:private</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewDidLoad</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:viewDidUnload</string>
		<string>___VARIABLE_classPrefix:identifier___ViewController.m:implementation:shouldAutorotateToInterfaceOrientation:return</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>useStoryboard</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:viewController</key>
							<string>@property (strong, nonatomic) ___VARIABLE_classPrefix:identifier___ViewController *viewController;
</string>
							<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationdidFinishLaunchingWithOptions:setup</key>
							<string>self.viewController = ___RP___[[___VARIABLE_classPrefix:identifier___ViewController alloc] initWithNibName:@&quot;___VARIABLE_classPrefix:identifier___ViewController&quot; bundle:nil]___AR___;
self.window.rootViewController = self.viewController;</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:class:___VARIABLE_classPrefix:identifier___ViewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:viewController</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:import:___VARIABLE_classPrefix:identifier___ViewController.h</string>
							<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_viewController</string>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>universalDeviceFamily</string>
			<key>Units</key>
			<dict>
				<key>Universal</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>en.lproj/MainStoryboard_iPad.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
								<key>Group</key>
								<string>Resources</string>
							</dict>
							<key>en.lproj/MainStoryboard_iPhone.storyboard</key>
							<dict>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
								<key>Group</key>
								<string>Resources</string>
							</dict>
						</dict>
					</dict>
				</array>
				<key>iPad</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Group</key>
								<string>Resources</string>
								<key>Path</key>
								<string>MainStoryboard_iPad.storyboard</string>
							</dict>
						</dict>
					</dict>
				</array>
				<key>iPhone</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>en.lproj/MainStoryboard.storyboard</key>
							<dict>
								<key>Group</key>
								<string>Resources</string>
								<key>Path</key>
								<string>MainStoryboard_iPhone.storyboard</string>
							</dict>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Whether the application should use the Core Data framework for storage</string>
			<key>Identifier</key>
			<string>coreData</string>
			<key>Name</key>
			<string>Use Core Data</string>
			<key>SortOrder</key>
			<integer>1</integer>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<dict>
					<key>Definitions</key>
					<dict>
						<key>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</key>
						<dict>
							<key>Path</key>
							<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
						</dict>
						<key>___PACKAGENAME___-Prefix.pch:objC:importCoreData</key>
						<string>#import &lt;CoreData/CoreData.h&gt;</string>
						<key>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:coreData</key>
						<string>@property (readonly, strong, nonatomic) NSManagedObjectContext *managedObjectContext;
@property (readonly, strong, nonatomic) NSManagedObjectModel *managedObjectModel;
@property (readonly, strong, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator;

- (void)saveContext;
- (NSURL *)applicationDocumentsDirectory;
</string>
						<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationWillTerminate:comments</key>
						<string>// Saves changes in the application&apos;s managed object context before the application terminates.
</string>
						<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationWillTerminate:save</key>
						<string>[self saveContext];
</string>
						<key>___VARIABLE_classPrefix:identifier___AppDelegate.m:coreData</key>
						<string>- (void)saveContext
{
    NSError *error = nil;
    NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
    if (managedObjectContext != nil) {
        if ([managedObjectContext hasChanges] &amp;&amp; ![managedObjectContext save:&amp;error]) {
             // Replace this implementation with code to handle the error appropriately.
             // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
            NSLog(@&quot;Unresolved error %@, %@&quot;, error, [error userInfo]);
            abort();
        } 
    }
}

#pragma mark - Core Data stack

// Returns the managed object context for the application.
// If the context doesn&apos;t already exist, it is created and bound to the persistent store coordinator for the application.
- (NSManagedObjectContext *)managedObjectContext
{
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
    
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil) {
        _managedObjectContext = [[NSManagedObjectContext alloc] init];
        [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
    return _managedObjectContext;
}

// Returns the managed object model for the application.
// If the model doesn&apos;t already exist, it is created from the application&apos;s model.
- (NSManagedObjectModel *)managedObjectModel
{
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@&quot;___PACKAGENAMEASIDENTIFIER___&quot; withExtension:@&quot;momd&quot;];
    _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return _managedObjectModel;
}

// Returns the persistent store coordinator for the application.
// If the coordinator doesn&apos;t already exist, it is created and the application&apos;s store added to it.
- (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{
    if (_persistentStoreCoordinator != nil) {
        return _persistentStoreCoordinator;
    }
    
    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@&quot;___PACKAGENAMEASIDENTIFIER___.sqlite&quot;];
    
    NSError *error = nil;
    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&amp;error]) {
        /*
         Replace this implementation with code to handle the error appropriately.
         
         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. 
         
         Typical reasons for an error here include:
         * The persistent store is not accessible;
         * The schema for the persistent store is incompatible with current managed object model.
         Check the error message to determine what the actual problem was.
         
         
         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application&apos;s resources directory instead of a writeable directory.
         
         If you encounter schema incompatibility errors during development, you can reduce their frequency by:
         * Simply deleting the existing store:
         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]
         
         * Performing automatic lightweight migration by passing the following dictionary as the options parameter:
         @{NSMigratePersistentStoresAutomaticallyOption:@YES, NSInferMappingModelAutomaticallyOption:@YES}
         
         Lightweight migration will only work for a limited set of schema changes; consult &quot;Core Data Model Versioning and Data Migration Programming Guide&quot; for details.
         
         */
        NSLog(@&quot;Unresolved error %@, %@&quot;, error, [error userInfo]);
        abort();
    }    
    
    return _persistentStoreCoordinator;
}

#pragma mark - Application&apos;s Documents directory

// Returns the URL to the application&apos;s Documents directory.
- (NSURL *)applicationDocumentsDirectory
{
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}
</string>
					</dict>
					<key>Nodes</key>
					<array>
						<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.h:methods:coreData</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:managedObjectContext = _managedObjectContext</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:managedObjectModel = _managedObjectModel</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:synthesize:persistentStoreCoordinator = _persistentStoreCoordinator</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_managedObjectContext</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_managedObjectModel</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:implementation:dealloc:_persistentStoreCoordinator</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:applicationWillTerminate:save</string>
						<string>___VARIABLE_classPrefix:identifier___AppDelegate.m:coreData</string>
						<string>___PACKAGENAME___-Prefix.pch:objC:importCoreData</string>
					</array>
					<key>Targets</key>
					<array>
						<dict>
							<key>Frameworks</key>
							<array>
								<string>CoreData</string>
							</array>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
